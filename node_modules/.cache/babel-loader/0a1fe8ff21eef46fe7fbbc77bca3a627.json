{"ast":null,"code":"import moment from \"moment\";\nimport \"moment/locale/ko\";\nexport const CHANGE_MONTH = \"CHANGE_MONTH\";\nexport const CHANGE_DATE = \"CHANGE_DATE\";\nexport const changeMonth = month => {\n  return {\n    type: \"CHANGE_MONTH\",\n    payload: month\n  };\n};\nexport const changeDate = (date, isStart) => {\n  return {\n    type: CHANGE_DATE,\n    payload: date,\n    isStart: isStart\n  };\n};\nconst initialState = {\n  date: moment(),\n  startDate: moment(),\n  endDate: moment()\n};\nexport default function dateReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CHANGE_MONTH:\n      {\n        return { ...state,\n          date: state.date.month(action.payload).clone()\n        };\n      }\n\n    case CHANGE_DATE:\n      {\n        const {\n          startDate,\n          endDate\n        } = state;\n\n        if (action.isStart) {\n          if (isAfterEndTime(endDate, action.payload)) {\n            return state;\n          } else {\n            return { ...state,\n              startDate: moment(action.payload)\n            };\n          }\n        } else {\n          console.log(action.payload);\n\n          if (isSameStartTime(startDate, action.payload)) {\n            return { ...state,\n              endDate: moment(action.payload)\n            };\n          } else if (isBeforeStartTime(startDate, action.payload)) {\n            return { ...state,\n              endDate: moment(action.payload)\n            };\n          } else {\n            return state;\n          }\n        }\n      }\n\n    default:\n      return state;\n  }\n}\n\nfunction isAfterEndTime(endDate, currentDate) {\n  return currentDate.isAfter(endDate);\n}\n\nfunction isBeforeStartTime(startDate, currentDate) {\n  return startDate.isBefore(currentDate);\n}\n\nfunction isSameStartTime(startDate, currentDate) {\n  return startDate.isSame(currentDate);\n}","map":{"version":3,"names":["moment","CHANGE_MONTH","CHANGE_DATE","changeMonth","month","type","payload","changeDate","date","isStart","initialState","startDate","endDate","dateReducer","state","action","clone","isAfterEndTime","console","log","isSameStartTime","isBeforeStartTime","currentDate","isAfter","isBefore","isSame"],"sources":["/home/minjikim/calenderJS/src/modules/Date.js"],"sourcesContent":["import moment from \"moment\";\nimport \"moment/locale/ko\";\nexport const CHANGE_MONTH = \"CHANGE_MONTH\";\nexport const CHANGE_DATE = \"CHANGE_DATE\";\n\nexport const changeMonth = (month) => {\n  return {\n    type: \"CHANGE_MONTH\",\n    payload: month,\n  };\n};\n\nexport const changeDate = (date, isStart) => {\n  return {\n    type: CHANGE_DATE,\n    payload: date,\n    isStart: isStart,\n  };\n};\n\nconst initialState = {\n  date: moment(),\n  startDate: moment(),\n  endDate: moment(),\n};\n\nexport default function dateReducer(state = initialState, action) {\n  switch (action.type) {\n    case CHANGE_MONTH: {\n      return { ...state, date: state.date.month(action.payload).clone() };\n    }\n\n    case CHANGE_DATE: {\n      const { startDate, endDate } = state;\n      if (action.isStart) {\n        if (isAfterEndTime(endDate, action.payload)) {\n          return state;\n        } else {\n          return {\n            ...state,\n            startDate: moment(action.payload),\n          };\n        }\n      } else {\n        console.log(action.payload);\n        if (isSameStartTime(startDate, action.payload)) {\n          return {\n            ...state,\n            endDate: moment(action.payload),\n          };\n        } else if (isBeforeStartTime(startDate, action.payload)) {\n          return {\n            ...state,\n            endDate: moment(action.payload),\n          };\n        } else {\n          return state;\n        }\n      }\n    }\n    default:\n      return state;\n  }\n}\n\nfunction isAfterEndTime(endDate, currentDate) {\n  return currentDate.isAfter(endDate);\n}\nfunction isBeforeStartTime(startDate, currentDate) {\n  return startDate.isBefore(currentDate);\n}\n\nfunction isSameStartTime(startDate, currentDate) {\n  return startDate.isSame(currentDate);\n}\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAO,kBAAP;AACA,OAAO,MAAMC,YAAY,GAAG,cAArB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AAEP,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAW;EACpC,OAAO;IACLC,IAAI,EAAE,cADD;IAELC,OAAO,EAAEF;EAFJ,CAAP;AAID,CALM;AAOP,OAAO,MAAMG,UAAU,GAAG,CAACC,IAAD,EAAOC,OAAP,KAAmB;EAC3C,OAAO;IACLJ,IAAI,EAAEH,WADD;IAELI,OAAO,EAAEE,IAFJ;IAGLC,OAAO,EAAEA;EAHJ,CAAP;AAKD,CANM;AAQP,MAAMC,YAAY,GAAG;EACnBF,IAAI,EAAER,MAAM,EADO;EAEnBW,SAAS,EAAEX,MAAM,EAFE;EAGnBY,OAAO,EAAEZ,MAAM;AAHI,CAArB;AAMA,eAAe,SAASa,WAAT,GAAmD;EAAA,IAA9BC,KAA8B,uEAAtBJ,YAAsB;EAAA,IAARK,MAAQ;;EAChE,QAAQA,MAAM,CAACV,IAAf;IACE,KAAKJ,YAAL;MAAmB;QACjB,OAAO,EAAE,GAAGa,KAAL;UAAYN,IAAI,EAAEM,KAAK,CAACN,IAAN,CAAWJ,KAAX,CAAiBW,MAAM,CAACT,OAAxB,EAAiCU,KAAjC;QAAlB,CAAP;MACD;;IAED,KAAKd,WAAL;MAAkB;QAChB,MAAM;UAAES,SAAF;UAAaC;QAAb,IAAyBE,KAA/B;;QACA,IAAIC,MAAM,CAACN,OAAX,EAAoB;UAClB,IAAIQ,cAAc,CAACL,OAAD,EAAUG,MAAM,CAACT,OAAjB,CAAlB,EAA6C;YAC3C,OAAOQ,KAAP;UACD,CAFD,MAEO;YACL,OAAO,EACL,GAAGA,KADE;cAELH,SAAS,EAAEX,MAAM,CAACe,MAAM,CAACT,OAAR;YAFZ,CAAP;UAID;QACF,CATD,MASO;UACLY,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACT,OAAnB;;UACA,IAAIc,eAAe,CAACT,SAAD,EAAYI,MAAM,CAACT,OAAnB,CAAnB,EAAgD;YAC9C,OAAO,EACL,GAAGQ,KADE;cAELF,OAAO,EAAEZ,MAAM,CAACe,MAAM,CAACT,OAAR;YAFV,CAAP;UAID,CALD,MAKO,IAAIe,iBAAiB,CAACV,SAAD,EAAYI,MAAM,CAACT,OAAnB,CAArB,EAAkD;YACvD,OAAO,EACL,GAAGQ,KADE;cAELF,OAAO,EAAEZ,MAAM,CAACe,MAAM,CAACT,OAAR;YAFV,CAAP;UAID,CALM,MAKA;YACL,OAAOQ,KAAP;UACD;QACF;MACF;;IACD;MACE,OAAOA,KAAP;EAlCJ;AAoCD;;AAED,SAASG,cAAT,CAAwBL,OAAxB,EAAiCU,WAAjC,EAA8C;EAC5C,OAAOA,WAAW,CAACC,OAAZ,CAAoBX,OAApB,CAAP;AACD;;AACD,SAASS,iBAAT,CAA2BV,SAA3B,EAAsCW,WAAtC,EAAmD;EACjD,OAAOX,SAAS,CAACa,QAAV,CAAmBF,WAAnB,CAAP;AACD;;AAED,SAASF,eAAT,CAAyBT,SAAzB,EAAoCW,WAApC,EAAiD;EAC/C,OAAOX,SAAS,CAACc,MAAV,CAAiBH,WAAjB,CAAP;AACD"},"metadata":{},"sourceType":"module"}